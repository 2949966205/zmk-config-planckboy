#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include "helper.h"
#include "greek.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        bracket {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <19 20>;
            layers = <0>;
        };

        bracket_r {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <21 20>;
            layers = <0>;
        };

        lb {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
            layers = <0>;
        };

        rb {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <32 33>;
            layers = <0>;
        };

        lf {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <31 32>;
            layers = <0>;
        };

        rba {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 33>;
            layers = <0>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <16 17>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <19 18>;
            layers = <0>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <7 8>;
            layers = <0>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <30 31>;
            layers = <0>;
        };

        multiplu {
            bindings = <&kp KP_ASTERISK>;
            key-positions = <9 10>;
            layers = <0>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <21 22>;
            layers = <0>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <9 8>;
            layers = <0>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <2 3>;
            layers = <0>;
        };

        tick {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
            layers = <0>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <37 38>;
            layers = <0>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 4>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp TILDE>;
            key-positions = <4 5>;
            layers = <0>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <28 29>;
            layers = <0>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <6 7>;
            layers = <0>;
        };

        tilde {
            bindings = <&kp DOLLAR>;
            key-positions = <15 16>;
            layers = <0>;
        };

        exam {
            bindings = <&kp EXCL>;
            key-positions = <1 2>;
            layers = <0>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <14 15>;
            layers = <0>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <26 27>;
            layers = <0>;
        };

        scroll {
            bindings = <&mo 3>;
            key-positions = <19 20>;
            layers = <1>;
        };

        snipe {
            bindings = <&mo 2>;
            key-positions = <20 21>;
            layers = <1>;
        };

        switch {
            bindings = <&mo 9>;
            key-positions = <39 40>;
        };
    };

    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homewrow_mods_left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 9 8 10 11 23 22 35 34 33 21 20 19 18 30 31 32 41 40 39>;
            tapping-term-ms = <300>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <250>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <250>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak-dh {
            bindings = <
&kp TAB           &kp Q            &kp W            &kp F         &kp P              &kp B           &kp J        &kp L                 &kp U                 &kp Y             &kp SEMI     &kp BACKSLASH
&mt RCTRL ESCAPE  &hml LEFT_GUI A  &hml LEFT_ALT R  &hml LCTRL S  &hml LEFT_SHIFT T  &kp G           &kp M        &hmr RIGHT_SHIFT N    &hmr RIGHT_CONTROL E  &hmr RIGHT_ALT I  &hmr RGUI O  &kp APOS
&kp LSHFT         &kp Z            &kp X            &kp C         &kp D              &kp V           &kp K        &kp H                 &kp COMMA             &kp DOT           &kp FSLH     &sl 10
                                                    &kp LCMD      &kp SPACE          &lt 7 DELETE    &lt 8 ENTER  &mt DELETE BACKSPACE
            >;
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans     &trans     &trans       &trans    &trans    &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans       &trans    &trans    &trans  &trans  &trans  &trans
&trans  &none   &trans  &trans     &trans     &trans       &trans    &trans    &trans  &trans  &trans  &trans
                        &mkp RCLK  &mkp LCLK  &mkp MCLK    &mkp MB4  &mkp MB5
            >;
        };

        snipe {
            bindings = <
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
                        &mkp RCLK  &mkp LCLK  &mkp MCLK    &trans  &trans
            >;

            label = "snipe";
        };

        scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;

            label = "scroll";
        };

        colemak-dh_without_hrm {
            bindings = <
&kp TAB  &kp Q  &kp W  &kp F   &kp P   &kp B     &kp J   &kp L   &kp U      &kp Y    &kp SEMI  &kp BSPC
&trans   &kp A  &kp R  &kp S   &kp T   &kp G     &kp M   &kp N   &kp E      &kp I    &kp O     &kp APOS
&trans   &kp Z  &kp X  &kp C   &kp D   &kp V     &kp K   &kp H   &kp COMMA  &kp DOT  &kp FSLH  &trans
                       &trans  &trans  &trans    &trans  &trans
            >;
        };

        qwerty {
            bindings = <
&kp TAB  &kp Q  &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I      &kp O    &kp P     &trans
&trans   &kp A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K      &kp L    &kp SEMI  &trans
&trans   &kp Z  &kp X  &kp C   &kp V   &kp B     &kp N   &kp M   &kp COMMA  &kp DOT  &trans    &trans
                       &trans  &trans  &trans    &trans  &trans
            >;
        };

        game {
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R   &kp T        &kp Y   &kp U   &kp I      &kp O    &kp P     &trans
&mt RCTRL ESCAPE  &kp A  &kp S  &kp D     &kp F   &kp G        &kp H   &kp J   &kp K      &kp L    &kp SEMI  &trans
&kp LSHFT         &kp Z  &kp X  &kp C     &kp V   &kp B        &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans
                                &kp LALT  &kp N1  &kp SPACE    &trans  &trans
            >;
        };

        number {
            bindings = <
&trans  &none  &none  &none  &none  &none     &kp PLUS   &kp N7  &kp N8  &kp N9  &kp KP_MULTIPLY  &kp BSPC
&trans  &none  &none  &none  &none  &none     &kp MINUS  &kp N4  &kp N5  &kp N6  &kp FSLH         &trans
&none   &none  &none  &none  &none  &none     &kp DOT    &kp N1  &kp N2  &kp N3  &kp N0           &trans
                      &none  &none  &trans    &mo 9      &trans
            >;
        };

        fun {
            bindings = <
&none  &kp F12  &kp F7  &kp F8  &kp F9  &kp PRINTSCREEN    &none  &none      &none      &none     &none     &none
&none  &kp F11  &kp F4  &kp F5  &kp F6  &kp SCROLLLOCK     &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none
&none  &kp F10  &kp F1  &kp F2  &kp F3  &kp PAUSE_BREAK    &none  &none      &none      &none     &none     &none
                        &none   &none   &mo 9              &none  &trans
            >;
        };

        switch {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &to 6         &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &to 0         &to 4         &to 5         &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans          &trans  &trans
            >;

            label = "switch";
        };

        greek {
            bindings = <
&trans  &el_theta  &el_omega  &el_phi    &el_pi     &el_beta     &trans     &el_lambda  &el_upsilon  &el_psi   &trans       &trans
&trans  &el_alpha  &el_rho    &el_sigma  &el_tau    &el_gamma    &el_mu     &el_nu      &el_epsilon  &el_iota  &el_omikron  &trans
&trans  &el_zeta   &el_xi     &el_chi    &el_delta  &el_theta    &el_kappa  &el_eta     &trans       &trans    &trans       &trans
                              &trans     &trans     &trans       &trans     &trans
            >;
        };
    };
};
