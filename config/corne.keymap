/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        bracket {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
        };

        bracket_r {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
        };

        lb {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <4 3>;
        };

        rb {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 8>;
        };

        lf {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <3 2>;
        };

        rba {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <8 9>;
        };

        window {
            bindings = <&kp LG(NUMBER_1)>;
            key-positions = <36 1>;
        };

        m2 {
            bindings = <&kp LG(NUMBER_2)>;
            key-positions = <36 2>;
        };

        m3 {
            bindings = <&kp LG(NUMBER_3)>;
            key-positions = <36 3>;
        };

        m4 {
            bindings = <&kp LG(NUMBER_4)>;
            key-positions = <36 4>;
        };

        m5 {
            bindings = <&kp LG(N5)>;
            key-positions = <36 5>;
        };

        m6 {
            bindings = <&kp LG(NUMBER_6)>;
            key-positions = <36 6>;
        };

        m7 {
            bindings = <&kp LG(N7)>;
            key-positions = <36 7>;
        };

        m8 {
            bindings = <&kp LG(N8)>;
            key-positions = <36 8>;
        };

        m9 {
            bindings = <&kp LG(N9)>;
            key-positions = <36 9>;
        };

        m0 {
            bindings = <&kp LG(NUMBER_1)>;
            key-positions = <36 10>;
        };
    };

    macros {
        love: love {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(T) &kp H &kp I &kp S &kp SPACE &kp V &kp A &kp L &kp U &kp E &kp SPACE &kp W &kp I &kp L &kp L &kp SPACE &kp B &kp E &kp SPACE &kp U &kp S &kp E &kp D &kp SPACE &kp F &kp O &kp R &kp SPACE &kp B &kp I &kp N &kp D &kp I &kp N &kp G &kp SPACE &kp T &kp H &kp E &kp SPACE &kp M &kp A &kp C &kp R &kp O &kp SQT &kp S &kp SPACE &kp A &kp C &kp T &kp I &kp O &kp N &kp S &kp SPACE &kp I &kp N &kp SPACE &kp Y &kp O &kp U &kp R &kp SPACE &kp K &kp E &kp Y &kp M &kp A &kp P &kp SPACE &kp LPAR &kp E &kp DOT &kp G &kp DOT &kp SPACE &kp AMPS &kp N &kp E &kp W &kp UNDER &kp M &kp A &kp C &kp R &kp O &kp RPAR &kp SPACE &kp A &kp N &kp D &kp SPACE &kp S &kp H &kp O &kp U &kp L &kp D &kp SPACE &kp B &kp E &kp SPACE &kp U &kp N &kp I &kp Q &kp U &kp E &kp DOT &kp SPACE &kp LS(I) &kp T &kp SPACE &kp W &kp I &kp L &kp L &kp SPACE &kp A &kp L &kp S &kp O &kp SPACE &kp B &kp E &kp SPACE &kp U &kp S &kp E &kp D &kp SPACE &kp I &kp N &kp T &kp E &kp R &kp N &kp A &kp L &kp L &kp Y &kp SPACE &kp F &kp O &kp R &kp SPACE &kp T &kp H &kp E &kp SPACE &kp N &kp O &kp D &kp E &kp SPACE &kp N &kp A &kp M &kp E &kp SPACE &kp A &kp N &kp D &kp SPACE &kp L &kp A &kp B &kp E &kp L &kp SPACE &kp P &kp R &kp O &kp P &kp E &kp R &kp T &kp Y &kp COMMA &kp SPACE &kp W &kp H &kp I &kp C &kp H &kp SPACE &kp Y &kp O &kp U &kp SPACE &kp C &kp A &kp N &kp SPACE &kp C &kp U &kp S &kp T &kp O &kp M &kp I &kp Z &kp E &kp SPACE &kp L &kp A &kp T &kp E &kp R &kp DOT>;
            label = "LOVE";
        };
    };

    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homewrow_mods_left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 9 8 10 11 23 22 35 34 33 21 20 19 18 30 31 32 41 40 39>;
            tapping-term-ms = <200>;
            flavor = "tap-unless-interrupted";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            retro-tap;
        };
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            flavor = "tap-unless-interrupted";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            retro-tap;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y       &kp U  &kp I      &kp O    &kp P     &kp BSPC
&mt LCTRL ESCAPE  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H       &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT         &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N       &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                                &kp LGUI  &mo 2  &kp SPACE    &kp RETURN  &mo 3  &kp RALT
            >;
        };

        layer_4 {
            bindings = <
&kp TAB    &kp Q              &kp W         &kp F            &kp P        &kp B     &kp J   &kp L        &kp U             &kp Y         &kp SEMI            &kp BSPC
&trans     &hml LEFT_SHIFT A  &hml LCTRL R  &hml LEFT_ALT S  &hml LCMD T  &kp G     &kp M   &hmr RCMD N  &hmr RIGHT_ALT E  &hmr RCTRL I  &hmr RIGHT_SHIFT O  &kp APOS
&kp LSHFT  &kp Z              &kp X         &kp C            &kp D        &kp V     &kp K   &kp H        &kp COMMA         &kp DOT       &kp FSLH            &trans
                                            &trans           &trans       &trans    &trans  &trans       &trans
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT   &love         &trans        &trans        &trans        &trans          &trans    &trans    &trans    &trans     &trans  &trans
                                        &kp LGUI      &trans        &kp SPACE       &kp RET   &mo 4     &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &mo 4     &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&kp GRAVE  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
&trans     &tog 1  &tog 0  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
&trans     &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
                           &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
