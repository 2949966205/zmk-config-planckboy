#include <behaviors.dtsi>
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define HOST_OS 1  // set to 1 for Linux, default is 0 (Windows)
/*
 * helper.h
 *
 * Convenience macros simplifying ZMK's keymap configuration.
 * See https://github.com/urob/zmk-nodefree-config for documentation.
 */

#pragma once

#define ZMK_HELPER_STRINGIFY(x) #x

/* ZMK_BEHAVIOR */

#define ZMK_BEHAVIOR_CORE_caps_word       compatible = "zmk,behavior-caps-word";       #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_dynamic_macro   compatible = "zmk,behavior-dynamic-macro";   #binding-cells = <1>
#define ZMK_BEHAVIOR_CORE_hold_tap        compatible = "zmk,behavior-hold-tap";        #binding-cells = <2>
#define ZMK_BEHAVIOR_CORE_key_repeat      compatible = "zmk,behavior-key-repeat";      #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_macro           compatible = "zmk,behavior-macro";           #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_macro_one_param compatible = "zmk,behavior-macro-one-param"; #binding-cells = <1>
#define ZMK_BEHAVIOR_CORE_macro_two_param compatible = "zmk,behavior-macro-two-param"; #binding-cells = <2>
#define ZMK_BEHAVIOR_CORE_mod_morph       compatible = "zmk,behavior-mod-morph";       #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_sticky_key      compatible = "zmk,behavior-sticky-key";      #binding-cells = <1>
#define ZMK_BEHAVIOR_CORE_tap_dance       compatible = "zmk,behavior-tap-dance";       #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_tri_state       compatible = "zmk,behavior-tri-state";       #binding-cells = <0>

#define ZMK_BEHAVIOR(name, type, ...) \
    / { \
        behaviors { \
            name: name { \
                label = ZMK_HELPER_STRINGIFY(ZB_ ## name); \
                ZMK_BEHAVIOR_CORE_ ## type; \
                __VA_ARGS__ \
            }; \
        }; \
    };

/* ZMK_LAYER */

#define MACRO_CHOOSER3(_1, _2, _3, FUNC, ...) FUNC
#define ZMK_LAYER(...) MACRO_CHOOSER3(__VA_ARGS__, ZMK_LAYER_3_ARGS, ZMK_LAYER_2_ARGS)(__VA_ARGS__)
#define ZMK_LAYER_2_ARGS(name, layout) \
    / { \
        keymap { \
            compatible = "zmk,keymap"; \
            layer_ ## name { \
                label = ZMK_HELPER_STRINGIFY(name); \
                bindings = <layout>; \
            }; \
        }; \
    };
#define ZMK_LAYER_3_ARGS(name, layout, sensors) \
    / { \
        keymap { \
            compatible = "zmk,keymap"; \
            layer_ ## name { \
                label = ZMK_HELPER_STRINGIFY(name); \
                bindings = <layout>; \
                sensor-bindings = <sensors>; \
            }; \
        }; \
    };

/* ZMK_COMBOS */

#define ALL 0xff
#if !defined COMBO_TERM
    #define COMBO_TERM 30
#endif
#if !defined COMBO_HOOK
    #define COMBO_HOOK
#endif

#define MACRO_CHOOSER5(_1, _2, _3, _4, _5, FUNC, ...) FUNC
#define ZMK_COMBO(...) MACRO_CHOOSER5(__VA_ARGS__, ZMK_COMBO_5_ARGS, ZMK_COMBO_4_ARGS)(__VA_ARGS__)
#define ZMK_COMBO_4_ARGS(name, combo_bindings, keypos, combo_layers) \
    ZMK_COMBO_5_ARGS(name, combo_bindings, keypos, combo_layers, COMBO_TERM)
#define ZMK_COMBO_5_ARGS(name, combo_bindings, keypos, combo_layers, combo_timeout) \
    / { \
        combos { \
            compatible = "zmk,combos"; \
            combo_ ## name { \
                timeout-ms = <combo_timeout>; \
                bindings = <combo_bindings>; \
                key-positions = <keypos>; \
                layers = <combo_layers>; \
                COMBO_HOOK \
            }; \
        }; \
    };

/* ZMK_CONDITIONAL_LAYER */

#define ZMK_CONDITIONAL_LAYER(if_layers, then_layer) \
    / { \
        conditional_layers { \
            compatible = "zmk,conditional-layers"; \
            tri_layer { \
                if-layers = <if_layers>; \
                then-layer = <then_layer>; \
            }; \
        }; \
    };

/* ZMK_UNICODE */

#if !defined OS_UNICODE_LEAD
    #if HOST_OS == 2
        #define OS_UNICODE_LEAD &macro_press &kp LALT      // macOS/Windows-Alt-Codes
    #elif HOST_OS == 1
        #define OS_UNICODE_LEAD &macro_tap &kp LS(LC(U))   // Linux
    #else
        #define OS_UNICODE_LEAD &macro_tap &kp RALT &kp U  // Windows + WinCompose (default)
    #endif
#endif
#if !defined OS_UNICODE_TRAIL
    #if HOST_OS == 2
        #define OS_UNICODE_TRAIL &macro_release &kp LALT  // macOS/Windows-Alt-Codes
    #elif HOST_OS == 1
        #define OS_UNICODE_TRAIL &macro_tap &kp SPACE     // Linux
    #else
        #define OS_UNICODE_TRAIL &macro_tap &kp RET       // Windows + WinCompose (default)
    #endif
#endif

#define UC_MACRO(name, unicode_bindings) \
    / { \
        macros { \
            name: name { \
                compatible = "zmk,behavior-macro"; \
                label = ZMK_HELPER_STRINGIFY(UC_MACRO_ ## name); \
                wait-ms = <0>; \
                tap-ms = <0>; \
                #binding-cells = <0>; \
                bindings = <OS_UNICODE_LEAD>, <&macro_tap unicode_bindings>, <OS_UNICODE_TRAIL>; \
            }; \
        }; \
    };

#define UC_MODMORPH(name, uc_binding, shifted_uc_binding) \
    / { \
        behaviors { \
            name: name { \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(UC_MORPH_ ## name); \
                #binding-cells = <0>; \
                bindings = <uc_binding>, <shifted_uc_binding>; \
                mods = <(MOD_LSFT|MOD_RSFT)>; \
            }; \
        }; \
    };

#define ZMK_UNICODE_SINGLE(name, L0, L1, L2, L3) \
    UC_MACRO(name ## _lower, &kp L0 &kp L1 &kp L2 &kp L3) \
    UC_MODMORPH(name, &name ## _lower, &none)

#define ZMK_UNICODE_PAIR(name, L0, L1, L2, L3, U0, U1, U2, U3) \
    UC_MACRO(name ## _lower, &kp L0 &kp L1 &kp L2 &kp L3) \
    UC_MACRO(name ## _upper, &kp U0 &kp U1 &kp U2 &kp U3) \
    UC_MODMORPH(name, &name ## _lower, &name ## _upper)

ZMK_UNICODE_PAIR(el_alpha,     N0, N3,  B, N1,    N0, N3, N9, N1)
ZMK_UNICODE_PAIR(el_beta,      N0, N3,  B, N2,    N0, N3, N9, N2)
ZMK_UNICODE_PAIR(el_gamma,     N0, N3,  B, N3,    N0, N3, N9, N3)
ZMK_UNICODE_PAIR(el_delta,     N0, N3,  B, N4,    N0, N3, N9, N4)
ZMK_UNICODE_PAIR(el_epsilon,   N0, N3,  F, N5,    N0, N3, N9, N5)  // varepsilon = 03B5
ZMK_UNICODE_PAIR(el_zeta,      N0, N3,  B, N6,    N0, N3, N9, N6)
ZMK_UNICODE_PAIR(el_eta,       N0, N3,  B, N7,    N0, N3, N9, N7)
ZMK_UNICODE_PAIR(el_theta,     N0, N3,  B, N8,    N0, N3, N9, N8)
ZMK_UNICODE_PAIR(el_iota,      N0, N3,  B, N9,    N0, N3, N9, N9)
ZMK_UNICODE_PAIR(el_kappa,     N0, N3,  B,  A,    N0, N3, N9,  A)
ZMK_UNICODE_PAIR(el_lambda,    N0, N3,  B,  B,    N0, N3, N9,  B)
ZMK_UNICODE_PAIR(el_mu,        N0, N3,  B,  C,    N0, N3, N9,  C)
ZMK_UNICODE_PAIR(el_nu,        N0, N3,  B,  D,    N0, N3, N9,  D)
ZMK_UNICODE_PAIR(el_xi,        N0, N3,  B,  E,    N0, N3, N9,  E)
ZMK_UNICODE_PAIR(el_omikron,   N0, N3,  B,  F,    N0, N3, N9,  F)
ZMK_UNICODE_PAIR(el_pi,        N0, N3,  C, N0,    N0, N3,  A, N0)
ZMK_UNICODE_PAIR(el_rho,       N0, N3,  C, N1,    N0, N3,  A, N1)
ZMK_UNICODE_PAIR(el_sigma,     N0, N3,  C, N3,    N0, N3,  A, N3)
ZMK_UNICODE_PAIR(el_tau,       N0, N3,  C, N4,    N0, N3,  A, N4)
ZMK_UNICODE_PAIR(el_upsilon,   N0, N3,  C, N5,    N0, N3,  A, N5)
ZMK_UNICODE_PAIR(el_phi,       N0, N3,  C, N6,    N0, N3,  A, N6)  // varphi = 03C6
ZMK_UNICODE_PAIR(el_chi,       N0, N3,  C, N7,    N0, N3,  A, N7)
ZMK_UNICODE_PAIR(el_psi,       N0, N3,  C, N8,    N0, N3,  A, N8)
ZMK_UNICODE_PAIR(el_omega,     N0, N3,  C, N9,    N0, N3,  A, N9)

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define U_MOUSE_MOVE_MAX 1400

/ {
    combos {
        compatible = "zmk,combos";

        bracket {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <19 20>;
        };

        bracket_r {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <21 20>;
        };

        lb {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
        };

        rb {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <32 33>;
        };

        lf {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <31 32>;
        };

        rba {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 33>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <16 17>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <19 18>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <7 8>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <30 31>;
        };

        multiplu {
            bindings = <&kp KP_ASTERISK>;
            key-positions = <9 10>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <21 22>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <9 8>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <2 3>;
        };

        tick {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <37 38>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 4>;
        };

        dollar {
            bindings = <&kp TILDE>;
            key-positions = <4 5>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <28 29>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <6 7>;
        };

        tilde {
            bindings = <&kp DOLLAR>;
            key-positions = <15 16>;
        };

        exam {
            bindings = <&kp EXCL>;
            key-positions = <1 2>;
        };
    };

    macros {
        love: love {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp X &kp I &kp A &kp O &kp SPACE &kp Y &kp A &kp N &kp G &kp COMMA &kp SPACE &kp LS(I) &kp SPACE &kp L &kp O &kp V &kp E &kp SPACE &kp Y &kp O &kp U &kp COMMA &kp SPACE &kp F &kp O &kp R &kp SPACE &kp E &kp V &kp E &kp R &kp Y &kp SPACE &kp T &kp H &kp I &kp N &kp G &kp SPACE &kp W &kp E &kp SPACE &kp H &kp A &kp V &kp E &kp SPACE &kp B &kp E &kp E &kp N &kp SPACE &kp T &kp H &kp R &kp O &kp U &kp G &kp H &kp COMMA &kp SPACE &kp LS(I) &kp SPACE &kp A &kp M &kp SPACE &kp R &kp O &kp O &kp T &kp I &kp N &kp G &kp SPACE &kp F &kp O &kp R &kp SPACE &kp Y &kp O &kp U>;
            label = "LOVE";
        };
    };

    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homewrow_mods_left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 9 8 10 11 23 22 35 34 33 21 20 19 18 30 31 32 41 40 39>;
            tapping-term-ms = <300>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak-dh {
            bindings = <
&kp TAB           &kp Q            &kp W            &kp F         &kp P              &kp B               &kp J        &kp L               &kp U                 &kp Y             &kp SEMI     &kp BACKSLASH
&mt RCTRL ESCAPE  &hml LEFT_GUI A  &hml LEFT_ALT R  &hml LCTRL S  &hml LEFT_SHIFT T  &kp G               &kp M        &hmr RIGHT_SHIFT N  &hmr RIGHT_CONTROL E  &hmr RIGHT_ALT I  &hmr RGUI O  &kp APOS
&kp LSHFT         &kp Z            &kp X            &kp C         &kp D              &kp V               &kp K        &kp H               &kp COMMA             &kp DOT           &kp FSLH     &sl 8
                                                    &kp LCMD      &kp SPACE          &lt 5 LEFT_SHIFT    &lt 4 ENTER  &lt 3 BACKSPACE     &kp DELETE
            >;
        };

        colemak-dh_without_hrm {
            bindings = <
&kp TAB  &kp Q  &kp W  &kp F   &kp P   &kp B     &kp J   &kp L   &kp U      &kp Y    &kp SEMI  &kp BSPC
&trans   &kp A  &kp R  &kp S   &kp T   &kp G     &kp M   &kp N   &kp E      &kp I    &kp O     &kp APOS
&trans   &kp Z  &kp X  &kp C   &kp D   &kp V     &kp K   &kp H   &kp COMMA  &kp DOT  &kp FSLH  &trans
                       &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        game {
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R   &kp T        &kp Y   &kp U   &kp I      &kp O    &kp P     &trans
&mt RCTRL ESCAPE  &kp A  &kp S  &kp D     &kp F   &kp G        &kp H   &kp J   &kp K      &kp L    &kp SEMI  &trans
&kp LSHFT         &kp Z  &kp X  &kp C     &kp V   &kp B        &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans
                                &kp LALT  &kp N1  &kp SPACE    &trans  &trans  &trans
            >;
        };

        number {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none      &kp LEFT_BRACKET  &kp NUMBER_7  &kp NUMBER_8  &kp N9        &kp RIGHT_BRACKET    &none     &none     &none         &none      &none  &kp BSPC
&none      &kp SLASH         &kp NUMBER_4  &kp N5        &kp N6        &kp KP_MULTIPLY      &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &none  &none
&kp LSHFT  &kp MINUS         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS             &none     &none     &trans        &trans     &none  &none
                                           &kp DOT       &kp N0        &kp NUMBER_0         &kp RET   &trans    &trans
            >;
        };

        fun {
            bindings = <
&none  &kp F12  &kp F7  &kp F8  &kp F9  &kp PRINTSCREEN    &none  &none      &none      &none     &none     &none
&none  &kp F11  &kp F4  &kp F5  &kp F6  &kp SCROLLLOCK     &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none
&none  &kp F10  &kp F1  &kp F2  &kp F3  &kp PAUSE_BREAK    &none  &none      &none      &none     &none     &none
                        &none   &none   &none              &none  &trans     &none
            >;
        };

        mouse {
            bindings = <
&none  &none     &kp C_VOL_DN  &kp C_VOLUME_UP  &none      &none    &kp K_REDO        &kp K_PASTE       &kp K_COPY      &kp K_CUT          &kp K_UNDO  &none
&none  &kp LGUI  &kp LALT      &kp LCTRL        &kp LSHFT  &none    &none   &none      &none    &none       &none
&none  &none     &none         &none            &none      &none    &none   &none      &none    &none  &none       &none
                               &none            &none      &none   &none   &none      &none    
            >;
        };

        switch {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &to 2         &trans        &trans          &trans       &trans  &trans  &trans  &trans  &trans
&trans      &trans        &to 0         &to 0         &to 1         &trans          &trans       &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans          &trans       &trans  &trans
            >;

            label = "switch";
        };

        media {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &trans             &trans          &trans        &trans           &trans        &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &ext_power EP_TOG  &kp C_PREVIOUS  &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_NEXT    &trans
&trans  &trans    &trans    &trans     &trans     &trans    &out OUT_TOG       &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4
                            &trans     &trans     &trans    &kp C_PAUSE        &kp C_STOP      &kp K_MUTE
            >;
        };

        greek {
            bindings = <
&trans  &el_theta  &el_omega  &el_phi    &el_pi     &el_beta     &trans     &el_lambda  &el_upsilon  &el_psi   &trans       &trans
&trans  &el_alpha  &el_rho    &el_sigma  &el_tau    &el_gamma    &el_mu     &el_nu      &el_epsilon  &el_iota  &el_omikron  &trans
&trans  &el_zeta   &el_xi     &el_chi    &el_delta  &el_theta    &el_kappa  &el_eta     &trans       &trans    &trans       &trans
                              &trans     &trans     &trans       &trans     &trans      &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        switch {
            if-layers = <4 3>;
            then-layer = <6>;
        };
    };
};
